/**
 * 緊急時対応サービス
 * 緊急事態の自動検知、アラート、通報機能
 */

export interface EmergencyAlert {
  id: string;
  userId: string;
  userName: string;
  type: 'medical' | 'safety' | 'environmental' | 'behavioral';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  detectedAt: string;
  location: string;
  status: 'active' | 'acknowledged' | 'resolved' | 'false_alarm';
  assignedTo?: string;
  responseTime?: number;
  resolutionNotes?: string;
  autoGenerated: boolean;
}

export interface EmergencyContact {
  id: string;
  name: string;
  relationship: string;
  phone: string;
  email?: string;
  priority: number; // 1 = 最優先
  notificationMethods: ('phone' | 'email' | 'sms')[];
  isActive: boolean;
}

export interface EmergencyProtocol {
  id: string;
  name: string;
  description: string;
  triggers: string[];
  steps: EmergencyStep[];
  requiredContacts: string[];
  estimatedResponseTime: number; // 分
  isActive: boolean;
}

export interface EmergencyStep {
  order: number;
  action: string;
  description: string;
  responsibleRole: string;
  estimatedTime: number; // 分
  isCritical: boolean;
}

export interface EmergencyResponse {
  alertId: string;
  responderId: string;
  responderName: string;
  action: string;
  timestamp: string;
  notes?: string;
  nextAction?: string;
}

export interface EmergencySettings {
  autoDetectionEnabled: boolean;
  criticalThresholds: {
    temperature: { min: number; max: number };
    bloodPressure: { systolic: { min: number; max: number }; diastolic: { min: number; max: number } };
    pulse: { min: number; max: number };
    spO2: { min: number };
    seizureDuration: { max: number }; // 分
  };
  notificationSettings: {
    enableSMS: boolean;
    enableEmail: boolean;
    enablePush: boolean;
    enablePhone: boolean;
    escalationDelay: number; // 分
    maxEscalationLevel: number;
  };
  responseSettings: {
    autoCallAmbulance: boolean;
    autoCallPolice: boolean;
    requireConfirmation: boolean;
    responseTimeout: number; // 分
  };
}

export class EmergencyResponseService {
  private static alerts: Map<string, EmergencyAlert> = new Map();
  private static contacts: EmergencyContact[] = [];
  private static protocols: EmergencyProtocol[] = [];
  private static responses: EmergencyResponse[] = [];
  private static settings: EmergencySettings = {
    autoDetectionEnabled: true,
    criticalThresholds: {
      temperature: { min: 35.0, max: 39.0 },
      bloodPressure: { 
        systolic: { min: 90, max: 180 }, 
        diastolic: { min: 60, max: 110 } 
      },
      pulse: { min: 50, max: 120 },
      spO2: { min: 90 },
      seizureDuration: { max: 5 }
    },
    notificationSettings: {
      enableSMS: true,
      enableEmail: true,
      enablePush: true,
      enablePhone: true,
      escalationDelay: 2,
      maxEscalationLevel: 3
    },
    responseSettings: {
      autoCallAmbulance: false,
      autoCallPolice: false,
      requireConfirmation: true,
      responseTimeout: 5
    }
  };

  /**
   * 緊急アラートを検知
   */
  static async detectEmergency(
    userId: string,
    userName: string,
    vitalSigns: any,
    behavior: any,
    environment: any
  ): Promise<EmergencyAlert | null> {
    if (!this.settings.autoDetectionEnabled) {
      return null;
    }

    const alerts: EmergencyAlert[] = [];

    // バイタルサインの異常検知
    const vitalSignsAlert = this.detectVitalSignsEmergency(userId, userName, vitalSigns);
    if (vitalSignsAlert) alerts.push(vitalSignsAlert);

    // 行動の異常検知
    const behaviorAlert = this.detectBehavioralEmergency(userId, userName, behavior);
    if (behaviorAlert) alerts.push(behaviorAlert);

    // 環境の異常検知
    const environmentalAlert = this.detectEnvironmentalEmergency(userId, userName, environment);
    if (environmentalAlert) alerts.push(environmentalAlert);

    // 最も深刻なアラートを返す
    if (alerts.length > 0) {
      const criticalAlert = alerts.reduce((prev, current) => 
        this.getSeverityLevel(current.severity) > this.getSeverityLevel(prev.severity) ? current : prev
      );
      
      await this.createAlert(criticalAlert);
      return criticalAlert;
    }

    return null;
  }

  /**
   * バイタルサインの緊急検知
   */
  private static detectVitalSignsEmergency(
    userId: string,
    userName: string,
    vitalSigns: any
  ): EmergencyAlert | null {
    const { criticalThresholds } = this.settings;
    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';
    let description = '';

    // 体温チェック
    if (vitalSigns.temperature < criticalThresholds.temperature.min) {
      severity = 'high';
      description = `低体温: ${vitalSigns.temperature}°C`;
    } else if (vitalSigns.temperature > criticalThresholds.temperature.max) {
      severity = 'critical';
      description = `高熱: ${vitalSigns.temperature}°C`;
    }

    // 血圧チェック
    if (vitalSigns.bloodPressure) {
      const { systolic, diastolic } = vitalSigns.bloodPressure;
      if (systolic < criticalThresholds.bloodPressure.systolic.min || 
          systolic > criticalThresholds.bloodPressure.systolic.max) {
        severity = severity === 'critical' ? 'critical' : 'high';
        description += description ? `, 血圧異常: ${systolic}/${diastolic}` : `血圧異常: ${systolic}/${diastolic}`;
      }
    }

    // 脈拍チェック
    if (vitalSigns.pulse < criticalThresholds.pulse.min || 
        vitalSigns.pulse > criticalThresholds.pulse.max) {
      severity = severity === 'critical' ? 'critical' : 'high';
      description += description ? `, 脈拍異常: ${vitalSigns.pulse}/分` : `脈拍異常: ${vitalSigns.pulse}/分`;
    }

    // SpO2チェック
    if (vitalSigns.spO2 < criticalThresholds.spO2.min) {
      severity = 'critical';
      description += description ? `, SpO2低下: ${vitalSigns.spO2}%` : `SpO2低下: ${vitalSigns.spO2}%`;
    }

    if (severity !== 'low') {
      return {
        id: this.generateAlertId(),
        userId,
        userName,
        type: 'medical',
        severity,
        description,
        detectedAt: new Date().toISOString(),
        location: '居室',
        status: 'active',
        autoGenerated: true
      };
    }

    return null;
  }

  /**
   * 行動の緊急検知
   */
  private static detectBehavioralEmergency(
    userId: string,
    userName: string,
    behavior: any
  ): EmergencyAlert | null {
    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';
    let description = '';

    // 発作の検知
    if (behavior.seizure && behavior.seizure.duration > this.settings.criticalThresholds.seizureDuration.max) {
      severity = 'critical';
      description = `長時間発作: ${behavior.seizure.duration}分`;
    }

    // 暴力行為の検知
    if (behavior.aggressiveBehavior) {
      severity = 'high';
      description = '暴力行為が検知されました';
    }

    // 自傷行為の検知
    if (behavior.selfHarm) {
      severity = 'critical';
      description = '自傷行為が検知されました';
    }

    // 徘徊の検知
    if (behavior.wandering) {
      severity = 'medium';
      description = '徘徊が検知されました';
    }

    if (severity !== 'low') {
      return {
        id: this.generateAlertId(),
        userId,
        userName,
        type: 'behavioral',
        severity,
        description,
        detectedAt: new Date().toISOString(),
        location: '施設内',
        status: 'active',
        autoGenerated: true
      };
    }

    return null;
  }

  /**
   * 環境の緊急検知
   */
  private static detectEnvironmentalEmergency(
    userId: string,
    userName: string,
    environment: any
  ): EmergencyAlert | null {
    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low';
    let description = '';

    // 火災検知
    if (environment.fire) {
      severity = 'critical';
      description = '火災が検知されました';
    }

    // ガス漏れ検知
    if (environment.gasLeak) {
      severity = 'critical';
      description = 'ガス漏れが検知されました';
    }

    // 温度異常
    if (environment.temperature > 35 || environment.temperature < 10) {
      severity = 'high';
      description = `室温異常: ${environment.temperature}°C`;
    }

    // 湿度異常
    if (environment.humidity > 80 || environment.humidity < 30) {
      severity = 'medium';
      description = `湿度異常: ${environment.humidity}%`;
    }

    if (severity !== 'low') {
      return {
        id: this.generateAlertId(),
        userId,
        userName,
        type: 'environmental',
        severity,
        description,
        detectedAt: new Date().toISOString(),
        location: '施設内',
        status: 'active',
        autoGenerated: true
      };
    }

    return null;
  }

  /**
   * アラートを作成
   */
  static async createAlert(alert: EmergencyAlert): Promise<void> {
    this.alerts.set(alert.id, alert);
    
    // 緊急連絡先に通知
    await this.notifyEmergencyContacts(alert);
    
    // プロトコルを実行
    await this.executeEmergencyProtocol(alert);
    
    // ログに記録
    console.log(`緊急アラート作成: ${alert.description} (${alert.severity})`);
  }

  /**
   * 緊急連絡先に通知
   */
  private static async notifyEmergencyContacts(alert: EmergencyAlert): Promise<void> {
    const activeContacts = this.contacts
      .filter(contact => contact.isActive)
      .sort((a, b) => a.priority - b.priority);

    for (const contact of activeContacts) {
      try {
        if (contact.notificationMethods.includes('phone') && this.settings.notificationSettings.enablePhone) {
          await this.sendPhoneNotification(contact, alert);
        }
        
        if (contact.notificationMethods.includes('email') && this.settings.notificationSettings.enableEmail) {
          await this.sendEmailNotification(contact, alert);
        }
        
        if (contact.notificationMethods.includes('sms') && this.settings.notificationSettings.enableSMS) {
          await this.sendSMSNotification(contact, alert);
        }
      } catch (error) {
        console.error(`緊急通知エラー (${contact.name}):`, error);
      }
    }
  }

  /**
   * 電話通知を送信
   */
  private static async sendPhoneNotification(contact: EmergencyContact, alert: EmergencyAlert): Promise<void> {
    // モック実装（実際はTwilioなどのサービスを使用）
    console.log(`電話通知: ${contact.name} (${contact.phone}) - ${alert.description}`);
  }

  /**
   * メール通知を送信
   */
  private static async sendEmailNotification(contact: EmergencyContact, alert: EmergencyAlert): Promise<void> {
    // モック実装（実際はSendGridなどのサービスを使用）
    console.log(`メール通知: ${contact.name} (${contact.email}) - ${alert.description}`);
  }

  /**
   * SMS通知を送信
   */
  private static async sendSMSNotification(contact: EmergencyContact, alert: EmergencyAlert): Promise<void> {
    // モック実装（実際はTwilioなどのサービスを使用）
    console.log(`SMS通知: ${contact.name} (${contact.phone}) - ${alert.description}`);
  }

  /**
   * 緊急プロトコルを実行
   */
  private static async executeEmergencyProtocol(alert: EmergencyAlert): Promise<void> {
    const applicableProtocols = this.protocols.filter(protocol => 
      protocol.isActive && protocol.triggers.some(trigger => 
        alert.description.includes(trigger) || alert.type === trigger
      )
    );

    for (const protocol of applicableProtocols) {
      console.log(`プロトコル実行: ${protocol.name}`);
      
      for (const step of protocol.steps) {
        console.log(`ステップ ${step.order}: ${step.action}`);
        
        // 実際の実装では、各ステップに応じた処理を実行
        await this.executeProtocolStep(step, alert);
        
        // 重要なステップの場合は確認を待つ
        if (step.isCritical && this.settings.responseSettings.requireConfirmation) {
          await this.waitForConfirmation(step, alert);
        }
      }
    }
  }

  /**
   * プロトコルステップを実行
   */
  private static async executeProtocolStep(step: EmergencyStep, alert: EmergencyAlert): Promise<void> {
    // モック実装
    console.log(`実行: ${step.action} (担当: ${step.responsibleRole})`);
  }

  /**
   * 確認を待つ
   */
  private static async waitForConfirmation(step: EmergencyStep, alert: EmergencyAlert): Promise<void> {
    console.log(`確認待ち: ${step.action}`);
    
    // 実際の実装では、UIで確認ボタンを表示し、ユーザーの入力を待つ
    return new Promise(resolve => {
      setTimeout(() => {
        console.log('確認完了（タイムアウト）');
        resolve();
      }, this.settings.responseSettings.responseTimeout * 60 * 1000);
    });
  }

  /**
   * アラートを更新
   */
  static updateAlert(alertId: string, updates: Partial<EmergencyAlert>): void {
    const alert = this.alerts.get(alertId);
    if (alert) {
      const updatedAlert = { ...alert, ...updates };
      this.alerts.set(alertId, updatedAlert);
    }
  }

  /**
   * レスポンスを記録
   */
  static recordResponse(response: EmergencyResponse): void {
    this.responses.push(response);
    
    // 対応時間を計算
    const alert = this.alerts.get(response.alertId);
    if (alert && alert.status === 'active') {
      const responseTime = (new Date().getTime() - new Date(alert.detectedAt).getTime()) / 1000 / 60; // 分
      this.updateAlert(response.alertId, { 
        status: 'acknowledged', 
        assignedTo: response.responderId,
        responseTime 
      });
    }
  }

  /**
   * アラートを解決
   */
  static resolveAlert(alertId: string, notes: string): void {
    const alert = this.alerts.get(alertId);
    if (alert) {
      alert.status = 'resolved';
      alert.resolutionNotes = notes;
      this.alerts.set(alertId, alert);
    }
  }

  /**
   * アラートを確認済みにマーク
   */
  static acknowledgeAlert(alertId: string, response: EmergencyResponse): void {
    const alert = this.alerts.get(alertId);
    if (alert) {
      alert.status = 'acknowledged';
      alert.assignedTo = response.responderId;
      this.alerts.set(alertId, alert);
      this.recordResponse(response);
    }
  }

  /**
   * アラートを解決済みにマーク（レスポンスオブジェクト版）
   */
  static resolveAlertWithResponse(alertId: string, response: EmergencyResponse): void {
    const alert = this.alerts.get(alertId);
    if (alert) {
      alert.status = 'resolved';
      alert.resolutionNotes = response.notes;
      this.alerts.set(alertId, alert);
      this.recordResponse(response);
    }
  }

  /**
   * 緊急連絡先を追加
   */
  static addContact(contact: EmergencyContact): void {
    this.contacts.push(contact);
  }

  /**
   * 緊急連絡先を更新
   */
  static updateContact(contactId: string, updates: Partial<EmergencyContact>): void {
    const index = this.contacts.findIndex(c => c.id === contactId);
    if (index !== -1) {
      this.contacts[index] = { ...this.contacts[index], ...updates };
    }
  }

  /**
   * 緊急連絡先を削除
   */
  static removeContact(contactId: string): void {
    this.contacts = this.contacts.filter(c => c.id !== contactId);
  }

  /**
   * プロトコルを追加
   */
  static addProtocol(protocol: EmergencyProtocol): void {
    this.protocols.push(protocol);
  }

  /**
   * 設定を更新
   */
  static updateSettings(newSettings: Partial<EmergencySettings>): void {
    this.settings = { ...this.settings, ...newSettings };
  }

  /**
   * すべてのアラートを取得
   */
  static getAllAlerts(): EmergencyAlert[] {
    return Array.from(this.alerts.values()).sort((a, b) => 
      new Date(b.detectedAt).getTime() - new Date(a.detectedAt).getTime()
    );
  }

  /**
   * アクティブなアラートを取得
   */
  static getActiveAlerts(): EmergencyAlert[] {
    return this.getAllAlerts().filter(alert => alert.status === 'active');
  }

  /**
   * 緊急連絡先を取得
   */
  static getContacts(): EmergencyContact[] {
    return [...this.contacts];
  }

  /**
   * プロトコルを取得
   */
  static getProtocols(): EmergencyProtocol[] {
    return [...this.protocols];
  }

  /**
   * レスポンス履歴を取得
   */
  static getResponses(alertId?: string): EmergencyResponse[] {
    if (alertId) {
      return this.responses.filter(r => r.alertId === alertId);
    }
    return [...this.responses];
  }

  /**
   * 設定を取得
   */
  static getSettings(): EmergencySettings {
    return { ...this.settings };
  }

  // ヘルパーメソッド
  private static generateAlertId(): string {
    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private static getSeverityLevel(severity: string): number {
    switch (severity) {
      case 'low': return 1;
      case 'medium': return 2;
      case 'high': return 3;
      case 'critical': return 4;
      default: return 0;
    }
  }

  private static getAlertTypeText(type: string): string {
    switch (type) {
      case 'medical': return '医療';
      case 'safety': return '安全';
      case 'environmental': return '環境';
      case 'behavioral': return '行動';
      default: return 'その他';
    }
  }

  private static getSeverityText(severity: string): string {
    switch (severity) {
      case 'low': return '軽度';
      case 'medium': return '中度';
      case 'high': return '重度';
      case 'critical': return '緊急';
      default: return '不明';
    }
  }
} 